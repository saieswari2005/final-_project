{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOU4NEKrU6Re1FDOwwb3mR+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FAoYEwzBBMFG","executionInfo":{"status":"ok","timestamp":1745418249226,"user_tz":-330,"elapsed":4039,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}},"outputId":"6353bf01-7888-40a1-e44e-2a549310447b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: lifetimes in /usr/local/lib/python3.11/dist-packages (0.11.3)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.11/dist-packages (3.1.5)\n","Requirement already satisfied: numpy>=1.10.0 in /usr/local/lib/python3.11/dist-packages (from lifetimes) (2.0.2)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from lifetimes) (1.14.1)\n","Requirement already satisfied: pandas>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from lifetimes) (2.2.2)\n","Requirement already satisfied: autograd>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from lifetimes) (1.7.0)\n","Requirement already satisfied: dill>=0.2.6 in /usr/local/lib/python3.11/dist-packages (from lifetimes) (0.4.0)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.11/dist-packages (from openpyxl) (2.0.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24.0->lifetimes) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24.0->lifetimes) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=0.24.0->lifetimes) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=0.24.0->lifetimes) (1.17.0)\n"]}],"source":["# Install necessary libraries\n","!pip install lifetimes openpyxl\n","\n","# Import libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from lifetimes import BetaGeoFitter, GammaGammaFitter\n","from lifetimes.utils import summary_data_from_transaction_data\n"]},{"cell_type":"code","source":["# Upload the dataset to Colab\n","from google.colab import files\n","uploaded = files.upload()\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"zEf1qLyVCPmp","executionInfo":{"status":"ok","timestamp":1745420116955,"user_tz":-330,"elapsed":785907,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}},"outputId":"7ffbb9bc-dc58-41a4-83a3-058e8c940f74"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-a9cab5d4-cd04-4685-a32f-801262b00365\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-a9cab5d4-cd04-4685-a32f-801262b00365\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving online_retail_II.xlsx to online_retail_II.xlsx\n"]}]},{"cell_type":"code","source":["# Load the dataset\n","df = pd.read_excel('online_retail_II.xlsx', sheet_name='Year 2010-2011')"],"metadata":{"id":"mSsI17RNJlc3","executionInfo":{"status":"ok","timestamp":1745420255214,"user_tz":-330,"elapsed":59888,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Remove rows with missing CustomerID\n","df = df[df['Customer ID'].notnull()]\n","\n","# Remove canceled orders\n","df = df[~df['Invoice'].astype(str).str.startswith('C')]\n","\n","# Calculate TotalPrice\n","df['TotalPrice'] = df['Quantity'] * df['Price']\n"],"metadata":{"id":"BflN498zJ5jP","executionInfo":{"status":"ok","timestamp":1745420284589,"user_tz":-330,"elapsed":596,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Convert InvoiceDate to datetime\n","df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])\n","\n","# Set analysis date as one day after the last invoice date\n","analysis_date = df['InvoiceDate'].max() + pd.Timedelta(days=1)\n","\n","# Create RFM summary\n","rfm = summary_data_from_transaction_data(df, 'Customer ID', 'InvoiceDate', monetary_value_col='TotalPrice', observation_period_end=analysis_date)\n"],"metadata":{"id":"fAQn7WrlKAF4","executionInfo":{"status":"ok","timestamp":1745420304932,"user_tz":-330,"elapsed":564,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Filter out customers with non-positive monetary value\n","rfm_positive = rfm[rfm['monetary_value'] > 0]\n","\n","# Fit Gamma-Gamma model only on valid data\n","ggf = GammaGammaFitter()\n","ggf.fit(rfm_positive['frequency'], rfm_positive['monetary_value'])\n","\n","# Predict average transaction value and CLTV\n","rfm_positive['expected_average_profit'] = ggf.conditional_expected_average_profit(\n","    rfm_positive['frequency'],\n","    rfm_positive['monetary_value']\n",")\n","\n","rfm_positive['cltv'] = ggf.customer_lifetime_value(\n","    bgf,\n","    rfm_positive['frequency'],\n","    rfm_positive['recency'],\n","    rfm_positive['T'],\n","    rfm_positive['monetary_value'],\n","    time=1,  # predict 1 month ahead\n","    discount_rate=0.01\n",")\n"],"metadata":{"id":"JQPtZnvzKE0i","executionInfo":{"status":"ok","timestamp":1745420520426,"user_tz":-330,"elapsed":428,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# Filter customers with positive monetary value\n","rfm_positive = rfm[rfm['monetary_value'] > 0].copy()\n","\n","# Fit Gamma-Gamma model\n","ggf = GammaGammaFitter()\n","ggf.fit(rfm_positive['frequency'], rfm_positive['monetary_value'])\n","\n","# Predict average profit\n","rfm_positive['expected_average_profit'] = ggf.conditional_expected_average_profit(\n","    rfm_positive['frequency'],\n","    rfm_positive['monetary_value']\n",")\n","\n","# Predict CLTV\n","rfm_positive['cltv'] = ggf.customer_lifetime_value(\n","    bgf,\n","    rfm_positive['frequency'],\n","    rfm_positive['recency'],\n","    rfm_positive['T'],\n","    rfm_positive['monetary_value'],\n","    time=1,  # next 1 month\n","    discount_rate=0.01\n",")\n"],"metadata":{"id":"-OV4AWKzK5jI","executionInfo":{"status":"ok","timestamp":1745420781618,"user_tz":-330,"elapsed":531,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Add cltv and expected_average_profit back to full rfm (others will be NaN)\n","rfm = rfm.merge(\n","    rfm_positive[['expected_average_profit', 'cltv']],\n","    how='left',\n","    left_index=True,\n","    right_index=True\n",")\n"],"metadata":{"id":"ucjSbZlUL5Gf","executionInfo":{"status":"ok","timestamp":1745420799812,"user_tz":-330,"elapsed":5,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Remove rows with missing cltv before segmentation\n","rfm_segmented = rfm[rfm['cltv'].notnull()].copy()\n","\n","# Create CLTV segments\n","rfm_segmented['segment'] = pd.qcut(rfm_segmented['cltv'], 4, labels=['D', 'C', 'B', 'A'])\n"],"metadata":{"id":"vxrthSOrL9rW","executionInfo":{"status":"ok","timestamp":1745420815775,"user_tz":-330,"elapsed":382,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Plot CLTV distribution\n","rfm['cltv'].hist(bins=50)\n","plt.title('CLTV Distribution')\n","plt.xlabel('CLTV')\n","plt.ylabel('Number of Customers')\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"JtXYjM3VMCCn","executionInfo":{"status":"ok","timestamp":1745420860619,"user_tz":-330,"elapsed":758,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}},"outputId":"193bbc64-eb50-4b6e-933e-769ba30ff4f0"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Save the results to Excel\n","rfm.to_excel('cltv_predictions.xlsx')\n","files.download('cltv_predictions.xlsx')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"hR5YXpItMM1E","executionInfo":{"status":"ok","timestamp":1745420879435,"user_tz":-330,"elapsed":1260,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}},"outputId":"a9c138c5-4c5d-43d9-d3e1-da304719b9a8"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_8404f422-6560-4fac-be2c-25585611ec39\", \"cltv_predictions.xlsx\", 275053)"]},"metadata":{}}]},{"cell_type":"markdown","source":["**display the top 10 customers by predicted CLTV along with relevant features**"],"metadata":{"id":"_LwCIiPBVPQU"}},{"cell_type":"code","source":["# Show top 10 customers with their predicted CLTV (customer life time value)\n","print(rfm[['frequency', 'recency', 'T', 'monetary_value', 'cltv']].dropna().sort_values(by='cltv', ascending=False).head(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PAcXe5J6OdNr","executionInfo":{"status":"ok","timestamp":1745423131692,"user_tz":-330,"elapsed":1591,"user":{"displayName":"Lenka Saieswari","userId":"01138009758627880285"}},"outputId":"3fcb3418-31bb-4444-c065-14f4d24a2fe4"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["             frequency  recency      T  monetary_value          cltv\n","Customer ID                                                         \n","14646.0           44.0    353.0  355.0     6366.705909  19496.731693\n","18102.0           25.0    367.0  368.0     9349.477200  15702.079766\n","16446.0            1.0    205.0  206.0   168469.600000  15367.180496\n","17450.0           26.0    359.0  368.0     7404.690385  12944.264032\n","14096.0           16.0     97.0  102.0     4071.434375  11154.139431\n","14911.0          131.0    372.0  374.0     1093.661679   9607.583130\n","12415.0           15.0    313.0  338.0     7860.210000   8448.933203\n","14156.0           42.0    362.0  372.0     2787.081667   7848.230534\n","17511.0           27.0    371.0  374.0     3305.060741   5938.956726\n","16029.0           38.0    335.0  374.0     2034.808421   5152.138336\n"]}]}]}